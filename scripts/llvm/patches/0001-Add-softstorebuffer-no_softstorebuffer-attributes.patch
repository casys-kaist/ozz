From bf0797c8ff43748201057ddf1721d69a547eb716 Mon Sep 17 00:00:00 2001
From: "Dae R. Jeong" <threeearcat@gmail.com>
Date: Mon, 15 Feb 2021 06:41:29 +0000
Subject: [PATCH 1/3] Add softstorebuffer/no_softstorebuffer attributes

Ref: http://www.cs.cmu.edu/~seth/llvm/llvmannotation.html
---
 clang/include/clang/Basic/Attr.td         | 15 +++++++++++++-
 clang/include/clang/Basic/AttrDocs.td     |  7 +++++++
 clang/lib/CodeGen/CodeGenModule.cpp       | 13 ++++++++++++
 clang/lib/Sema/SemaDeclAttr.cpp           | 25 +++++++++++++++++++++++
 llvm/include/llvm/Bitcode/LLVMBitCodes.h  |  2 ++
 llvm/include/llvm/IR/Attributes.td        |  4 ++++
 llvm/lib/AsmParser/LLLexer.cpp            |  2 ++
 llvm/lib/AsmParser/LLParser.cpp           |  2 ++
 llvm/lib/AsmParser/LLToken.h              |  2 ++
 llvm/lib/Bitcode/Reader/BitcodeReader.cpp |  4 ++++
 llvm/lib/Bitcode/Writer/BitcodeWriter.cpp |  4 ++++
 llvm/lib/IR/Attributes.cpp                |  4 ++++
 llvm/lib/IR/Verifier.cpp                  |  2 ++
 13 files changed, 85 insertions(+), 1 deletion(-)

diff --git a/clang/include/clang/Basic/Attr.td b/clang/include/clang/Basic/Attr.td
index bfd50f6a6779..b5561b18ffa4 100644
--- a/clang/include/clang/Basic/Attr.td
+++ b/clang/include/clang/Basic/Attr.td
@@ -1619,7 +1619,7 @@ def ArmMveStrictPolymorphism : TypeAttr, TargetSpecificAttr<TargetARM> {
 }
 
 def NoUniqueAddress : InheritableAttr, TargetSpecificAttr<TargetItaniumCXXABI> {
-  let Spellings = [CXX11<"", "no_unique_address", 201803>];
+  let Spellings = [CXX11<"", "nounique_address", 201803>];
   let Subjects = SubjectList<[NonBitField], ErrorDiag>;
   let Documentation = [NoUniqueAddressDocs];
   let SimpleHandler = 1;
@@ -3669,6 +3669,19 @@ def Builtin : InheritableAttr {
   let Documentation = [Undocumented];
 }
 
+// Custom attribute for the store buffer emulation
+def SoftStoreBuffer : InheritableAttr {
+  let Spellings = [GNU<"softstorebuffer">];
+  let Subjects = SubjectList<[Function]>;
+  let Documentation = [SoftStoreBufferDocs];
+}
+
+def NoSoftStoreBuffer : InheritableAttr {
+  let Spellings = [GNU<"no_softstorebuffer">];
+  let Subjects = SubjectList<[Function]>;
+  let Documentation = [SoftStoreBufferDocs];
+}
+
 def EnforceTCB : InheritableAttr {
   let Spellings = [Clang<"enforce_tcb">];
   let Subjects = SubjectList<[Function]>;
diff --git a/clang/include/clang/Basic/AttrDocs.td b/clang/include/clang/Basic/AttrDocs.td
index 170a0fe3d4c4..ba8ae8f7cb13 100644
--- a/clang/include/clang/Basic/AttrDocs.td
+++ b/clang/include/clang/Basic/AttrDocs.td
@@ -5718,6 +5718,13 @@ Requirements on Development Tools - Engineering Specification Documentation
   }];
 }
 
+def SoftStoreBufferDocs : Documentation {
+  let Category = DocCatFunction;
+  let Content = [{
+This attribute declares a function that should emulate the store buffer.
+  }];
+}
+
 def AlwaysInlineDocs : Documentation {
   let Category = DocCatFunction;
   let Content = [{
diff --git a/clang/lib/CodeGen/CodeGenModule.cpp b/clang/lib/CodeGen/CodeGenModule.cpp
index 9c9bd4e374af..fa84bfd76773 100644
--- a/clang/lib/CodeGen/CodeGenModule.cpp
+++ b/clang/lib/CodeGen/CodeGenModule.cpp
@@ -1774,6 +1774,19 @@ void CodeGenModule::SetLLVMFunctionAttributesForDefinition(const Decl *D,
       B.addAttribute(llvm::Attribute::MinSize);
   }
 
+  // we check for softstorebuffer attribute on functions
+  if (const FunctionDecl *FD = dyn_cast_or_null<FunctionDecl>(D)) {
+    if (FD->hasAttr<SoftStoreBufferAttr>()) {
+      B.addAttribute(llvm::Attribute::SoftStoreBuffer);
+    }
+  }
+
+  if (const FunctionDecl *FD = dyn_cast_or_null<FunctionDecl>(D)) {
+    if (FD->hasAttr<NoSoftStoreBufferAttr>()) {
+      B.addAttribute(llvm::Attribute::NoSoftStoreBuffer);
+    }
+  }
+
   F->addAttributes(llvm::AttributeList::FunctionIndex, B);
 
   unsigned alignment = D->getMaxAlignment() / Context.getCharWidth();
diff --git a/clang/lib/Sema/SemaDeclAttr.cpp b/clang/lib/Sema/SemaDeclAttr.cpp
index 30d08b3d4ac0..f6abbdd3a971 100644
--- a/clang/lib/Sema/SemaDeclAttr.cpp
+++ b/clang/lib/Sema/SemaDeclAttr.cpp
@@ -7612,6 +7612,23 @@ EnforceTCBLeafAttr *Sema::mergeEnforceTCBLeafAttr(
       *this, D, AL);
 }
 
+static void handleSoftStoreBufferAttr(Sema &S, Decl *D, const ParsedAttr &Attr) {
+  if (!isFunctionOrMethod(D)) {
+    S.Diag(D->getLocation(), diag::warn_attribute_wrong_decl_type)
+      << "'softstorebuffer'" << ExpectedFunctionOrMethod;
+    return;
+  }
+  handleSimpleAttribute<SoftStoreBufferAttr>(S, D, Attr);
+}
+
+static void handleNoSoftStoreBufferAttr(Sema &S, Decl *D, const ParsedAttr &Attr) {
+  if (!isFunctionOrMethod(D)) {
+    S.Diag(D->getLocation(), diag::warn_attribute_wrong_decl_type)
+      << "'nosoftstorebuffer'" << ExpectedFunctionOrMethod;
+    return;
+  }
+  handleSimpleAttribute<NoSoftStoreBufferAttr>(S, D, Attr);
+}
 //===----------------------------------------------------------------------===//
 // Top Level Sema Entry Points
 //===----------------------------------------------------------------------===//
@@ -8319,6 +8336,14 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
     handleHandleAttr<UseHandleAttr>(S, D, AL);
     break;
 
+  case ParsedAttr::AT_SoftStoreBuffer:
+    handleSoftStoreBufferAttr(S, D, AL);
+    break;
+
+  case ParsedAttr::AT_NoSoftStoreBuffer:
+    handleNoSoftStoreBufferAttr(S, D, AL);
+    break;
+
   case ParsedAttr::AT_EnforceTCB:
     handleEnforceTCBAttr<EnforceTCBAttr, EnforceTCBLeafAttr>(S, D, AL);
     break;
diff --git a/llvm/include/llvm/Bitcode/LLVMBitCodes.h b/llvm/include/llvm/Bitcode/LLVMBitCodes.h
index 5b4854d6c95e..2b11272e79d1 100644
--- a/llvm/include/llvm/Bitcode/LLVMBitCodes.h
+++ b/llvm/include/llvm/Bitcode/LLVMBitCodes.h
@@ -657,6 +657,8 @@ enum AttributeKindCodes {
   ATTR_KIND_NO_CALLBACK = 71,
   ATTR_KIND_HOT = 72,
   ATTR_KIND_NO_PROFILE = 73,
+  ATTR_KIND_SoftStoreBuffer = 74,
+  ATTR_KIND_NoSoftStoreBuffer = 75,
 };
 
 enum ComdatSelectionKindCodes {
diff --git a/llvm/include/llvm/IR/Attributes.td b/llvm/include/llvm/IR/Attributes.td
index f7ffc888c65a..5cba1f02a69e 100644
--- a/llvm/include/llvm/IR/Attributes.td
+++ b/llvm/include/llvm/IR/Attributes.td
@@ -313,3 +313,7 @@ def : MergeRule<"adjustCallerStackProbeSize">;
 def : MergeRule<"adjustMinLegalVectorWidth">;
 def : MergeRule<"adjustNullPointerValidAttr">;
 def : MergeRule<"setAND<MustProgressAttr>">;
+
+// Custom attribute for the store buffer emulation
+def SoftStoreBuffer : EnumAttr<"softstorebuffer">;
+def NoSoftStoreBuffer : EnumAttr<"nosoftstorebuffer">;
diff --git a/llvm/lib/AsmParser/LLLexer.cpp b/llvm/lib/AsmParser/LLLexer.cpp
index 427de74f91ac..1ca72dbb4ef6 100644
--- a/llvm/lib/AsmParser/LLLexer.cpp
+++ b/llvm/lib/AsmParser/LLLexer.cpp
@@ -653,6 +653,8 @@ lltok::Kind LLLexer::LexIdentifier() {
   KEYWORD(nest);
   KEYWORD(noalias);
   KEYWORD(nobuiltin);
+  KEYWORD(softstorebuffer);
+  KEYWORD(nosoftstorebuffer);
   KEYWORD(nocallback);
   KEYWORD(nocapture);
   KEYWORD(noduplicate);
diff --git a/llvm/lib/AsmParser/LLParser.cpp b/llvm/lib/AsmParser/LLParser.cpp
index 2a3fb8fb6658..fe9753b6339f 100644
--- a/llvm/lib/AsmParser/LLParser.cpp
+++ b/llvm/lib/AsmParser/LLParser.cpp
@@ -1354,6 +1354,8 @@ bool LLParser::parseFnAttributeValuePairs(AttrBuilder &B,
       break;
     case lltok::kw_naked: B.addAttribute(Attribute::Naked); break;
     case lltok::kw_nobuiltin: B.addAttribute(Attribute::NoBuiltin); break;
+    case lltok::kw_softstorebuffer: B.addAttribute(Attribute::SoftStoreBuffer); break;
+    case lltok::kw_nosoftstorebuffer: B.addAttribute(Attribute::NoSoftStoreBuffer); break;
     case lltok::kw_nocallback:
       B.addAttribute(Attribute::NoCallback);
       break;
diff --git a/llvm/lib/AsmParser/LLToken.h b/llvm/lib/AsmParser/LLToken.h
index 5149f861837a..3b6b7bc2723f 100644
--- a/llvm/lib/AsmParser/LLToken.h
+++ b/llvm/lib/AsmParser/LLToken.h
@@ -200,6 +200,8 @@ enum Kind {
   kw_noalias,
   kw_noundef,
   kw_nobuiltin,
+  kw_softstorebuffer,
+  kw_nosoftstorebuffer,
   kw_nocallback,
   kw_nocapture,
   kw_noduplicate,
diff --git a/llvm/lib/Bitcode/Reader/BitcodeReader.cpp b/llvm/lib/Bitcode/Reader/BitcodeReader.cpp
index f2800201e871..08a62bb04947 100644
--- a/llvm/lib/Bitcode/Reader/BitcodeReader.cpp
+++ b/llvm/lib/Bitcode/Reader/BitcodeReader.cpp
@@ -1535,6 +1535,10 @@ static Attribute::AttrKind getAttrFromCode(uint64_t Code) {
     return Attribute::Preallocated;
   case bitc::ATTR_KIND_NOUNDEF:
     return Attribute::NoUndef;
+  case bitc::ATTR_KIND_SoftStoreBuffer:
+    return Attribute::SoftStoreBuffer;
+  case bitc::ATTR_KIND_NoSoftStoreBuffer:
+    return Attribute::NoSoftStoreBuffer;
   case bitc::ATTR_KIND_BYREF:
     return Attribute::ByRef;
   case bitc::ATTR_KIND_MUSTPROGRESS:
diff --git a/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp b/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp
index 37ecb9992e44..137a823f9056 100644
--- a/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp
+++ b/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp
@@ -761,6 +761,10 @@ static uint64_t getAttrKindEncoding(Attribute::AttrKind Kind) {
   case Attribute::EmptyKey:
   case Attribute::TombstoneKey:
     llvm_unreachable("Trying to encode EmptyKey/TombstoneKey");
+  case Attribute::SoftStoreBuffer:
+    return bitc::ATTR_KIND_SoftStoreBuffer;
+  case Attribute::NoSoftStoreBuffer:
+    return bitc::ATTR_KIND_NoSoftStoreBuffer;
   }
 
   llvm_unreachable("Trying to encode unknown attribute");
diff --git a/llvm/lib/IR/Attributes.cpp b/llvm/lib/IR/Attributes.cpp
index c4629decc6d9..d59141c8ed6e 100644
--- a/llvm/lib/IR/Attributes.cpp
+++ b/llvm/lib/IR/Attributes.cpp
@@ -457,6 +457,10 @@ std::string Attribute::getAsString(bool InAttrGrp) const {
     return "immarg";
   if (hasAttribute(Attribute::NoUndef))
     return "noundef";
+  if (hasAttribute(Attribute::SoftStoreBuffer))
+    return "softstorebuffer";
+  if (hasAttribute(Attribute::NoSoftStoreBuffer))
+    return "nosoftstorebuffer";
   if (hasAttribute(Attribute::MustProgress))
     return "mustprogress";
 
diff --git a/llvm/lib/IR/Verifier.cpp b/llvm/lib/IR/Verifier.cpp
index 6dd299ee9845..dc9653560e14 100644
--- a/llvm/lib/IR/Verifier.cpp
+++ b/llvm/lib/IR/Verifier.cpp
@@ -1648,6 +1648,8 @@ static bool isFuncOnlyAttr(Attribute::AttrKind Kind) {
   case Attribute::Speculatable:
   case Attribute::StrictFP:
   case Attribute::NullPointerIsValid:
+  case Attribute::SoftStoreBuffer:
+  case Attribute::NoSoftStoreBuffer:
   case Attribute::MustProgress:
   case Attribute::NoProfile:
     return true;
-- 
2.25.1

