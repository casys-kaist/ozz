commit 592fa002180af3425ba962b8e74edd680f0ec77b
Author: Roman Gushchin <roman.gushchin@linux.dev>
Date:   Mon Jun 28 19:35:44 2021 -0700

    writeback, cgroup: add smp_mb() to cgroup_writeback_umount()
    
    A full memory barrier is required between clearing SB_ACTIVE flag in
    generic_shutdown_super() and checking isw_nr_in_flight in
    cgroup_writeback_umount(), otherwise a new switch operation might be
    scheduled after atomic_read(&isw_nr_in_flight) returned 0.  This would
    result in a non-flushed isw_wq, and a potential crash.
    
    The problem hasn't yet been seen in the real life and was discovered by
    Jan Kara by looking into the code.
    
    Link: https://lkml.kernel.org/r/20210608230225.2078447-3-guro@fb.com
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Suggested-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Dave Chinner <dchinner@redhat.com>
    Cc: Dennis Zhou <dennis@kernel.org>
    Cc: Jan Kara <jack@suse.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/fs/fs-writeback.c b/fs/fs-writeback.c
index bd99890599e0..3564efcc4b78 100644
--- a/fs/fs-writeback.c
+++ b/fs/fs-writeback.c
@@ -1000,6 +1000,12 @@ int cgroup_writeback_by_id(u64 bdi_id, int memcg_id, unsigned long nr,
  */
 void cgroup_writeback_umount(void)
 {
+	/*
+	 * SB_ACTIVE should be reliably cleared before checking
+	 * isw_nr_in_flight, see generic_shutdown_super().
+	 */
+	smp_mb();
+
 	if (atomic_read(&isw_nr_in_flight)) {
 		/*
 		 * Use rcu_barrier() to wait for all pending callbacks to
