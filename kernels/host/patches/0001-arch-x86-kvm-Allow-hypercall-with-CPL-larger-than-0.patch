From 4409a12d53ad7ceb7dc5c705786a1674cc189780 Mon Sep 17 00:00:00 2001
From: "Dae R. Jeong" <threeearcat@gmail.com>
Date: Fri, 21 Dec 2018 19:27:47 +0900
Subject: [PATCH 1/3] arch/x86/kvm: Allow hypercall with CPL larger than 0

---
 arch/x86/kvm/Kconfig          |  5 +++++
 arch/x86/kvm/hcall.h          |  6 ++++++
 arch/x86/kvm/hcall_constant.h | 13 +++++++++++++
 arch/x86/kvm/x86.c            | 14 ++++++++++++++
 4 files changed, 38 insertions(+)
 create mode 100644 arch/x86/kvm/hcall.h
 create mode 100644 arch/x86/kvm/hcall_constant.h

diff --git a/arch/x86/kvm/Kconfig b/arch/x86/kvm/Kconfig
index 840e12583b85..2b7e0fae4ba5 100644
--- a/arch/x86/kvm/Kconfig
+++ b/arch/x86/kvm/Kconfig
@@ -100,4 +100,9 @@ config KVM_MMU_AUDIT
 # the virtualization menu.
 source "drivers/vhost/Kconfig"
 
+config KVM_USER_HYPERCALL
+    bool "Allow hypercall for userspace program"
+    depends on KVM && KVM_INTEL
+	default y
+
 endif # VIRTUALIZATION
diff --git a/arch/x86/kvm/hcall.h b/arch/x86/kvm/hcall.h
new file mode 100644
index 000000000000..c8d39ad70e66
--- /dev/null
+++ b/arch/x86/kvm/hcall.h
@@ -0,0 +1,6 @@
+#ifndef __HCALL_H
+#define __HCALL_H
+
+#include "hcall_constant.h"
+
+#endif /* __HCALL_H */
diff --git a/arch/x86/kvm/hcall_constant.h b/arch/x86/kvm/hcall_constant.h
new file mode 100644
index 000000000000..de624c7907f3
--- /dev/null
+++ b/arch/x86/kvm/hcall_constant.h
@@ -0,0 +1,13 @@
+#ifndef __HCALL_CONSTANT_H
+#define __HCALL_CONSTANT_H
+
+// RAX value of hcall request
+#define HCALL_RAX_ID 0x1d08aa3e
+// kvm_run->exit_reason
+#define HCALL_EXIT_REASON 0x33f355d
+#define KVM_EXIT_HCALL HCALL_EXIT_REASON
+
+// Sub-commands saved in kvm_run->hypercall.args[0]
+#define HCALL_INSTALL_BP 0xf477909a
+
+#endif /* __HCALL_CONSTANT_H */
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 9a69e1dc8280..f05cdbdd8766 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -26,6 +26,7 @@
 #include "cpuid.h"
 #include "pmu.h"
 #include "hyperv.h"
+#include "hcall.h"
 
 #include <linux/clocksource.h>
 #include <linux/interrupt.h>
@@ -7503,6 +7504,19 @@ int kvm_emulate_hypercall(struct kvm_vcpu *vcpu)
 	}
 
 	if (kvm_x86_ops->get_cpl(vcpu) != 0) {
+#ifdef CONFIG_KVM_USER_HYPERCALL
+#define LEN(x) (sizeof(x) / sizeof(x[0]))
+		// Hypercall
+		if (nr == HCALL_RAX_ID) {
+			vcpu->run->hypercall.nr = HCALL_RAX_ID;
+			vcpu->run->exit_reason = HCALL_EXIT_REASON;
+			vcpu->run->hypercall.args[0] = a0;
+			vcpu->run->hypercall.args[1] = a1;
+			vcpu->run->hypercall.args[2] = a2;
+			vcpu->run->hypercall.args[3] = a3;
+			return 0;
+		} else
+#endif
 		ret = -KVM_EPERM;
 		goto out;
 	}
-- 
2.25.1

